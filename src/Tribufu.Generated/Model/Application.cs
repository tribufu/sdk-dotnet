/*
 * Tribufu API
 *
 * REST API to access Tribufu services.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: contact@tribufu.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Tribufu.Generated.Client.OpenAPIDateConverter;

namespace Tribufu.Generated.Model
{
    /// <summary>
    /// Application
    /// </summary>
    [DataContract(Name = "Application")]
    public partial class Application : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public ApplicationType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Application" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="type">type.</param>
        /// <param name="organizationId">organizationId.</param>
        /// <param name="iconUrl">iconUrl.</param>
        /// <param name="bannerUrl">bannerUrl.</param>
        /// <param name="capsuleImageUrl">capsuleImageUrl.</param>
        /// <param name="libraryImageUrl">libraryImageUrl.</param>
        /// <param name="parentId">parentId.</param>
        /// <param name="slug">slug.</param>
        /// <param name="visibility">visibility.</param>
        /// <param name="password">password.</param>
        /// <param name="primary">primary.</param>
        /// <param name="userCount">userCount.</param>
        /// <param name="achievementCount">achievementCount.</param>
        /// <param name="badgeCount">badgeCount.</param>
        /// <param name="downloadCount">downloadCount.</param>
        /// <param name="created">created.</param>
        /// <param name="updated">updated.</param>
        public Application(string id = default(string), string name = default(string), string description = default(string), ApplicationType? type = default(ApplicationType?), string organizationId = default(string), string iconUrl = default(string), string bannerUrl = default(string), string capsuleImageUrl = default(string), string libraryImageUrl = default(string), string parentId = default(string), string slug = default(string), int visibility = default(int), string password = default(string), int primary = default(int), int userCount = default(int), int achievementCount = default(int), int? badgeCount = default(int?), int downloadCount = default(int), DateTime created = default(DateTime), DateTime? updated = default(DateTime?))
        {
            this.Id = id;
            this.Name = name;
            this.Description = description;
            this.Type = type;
            this.OrganizationId = organizationId;
            this.IconUrl = iconUrl;
            this.BannerUrl = bannerUrl;
            this.CapsuleImageUrl = capsuleImageUrl;
            this.LibraryImageUrl = libraryImageUrl;
            this.ParentId = parentId;
            this.Slug = slug;
            this.Visibility = visibility;
            this.Password = password;
            this.Primary = primary;
            this.UserCount = userCount;
            this.AchievementCount = achievementCount;
            this.BadgeCount = badgeCount;
            this.DownloadCount = downloadCount;
            this.Created = created;
            this.Updated = updated;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name = "organization_id", EmitDefaultValue = true)]
        public string OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets IconUrl
        /// </summary>
        [DataMember(Name = "icon_url", EmitDefaultValue = true)]
        public string IconUrl { get; set; }

        /// <summary>
        /// Gets or Sets BannerUrl
        /// </summary>
        [DataMember(Name = "banner_url", EmitDefaultValue = true)]
        public string BannerUrl { get; set; }

        /// <summary>
        /// Gets or Sets CapsuleImageUrl
        /// </summary>
        [DataMember(Name = "capsule_image_url", EmitDefaultValue = true)]
        public string CapsuleImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets LibraryImageUrl
        /// </summary>
        [DataMember(Name = "library_image_url", EmitDefaultValue = true)]
        public string LibraryImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name = "parent_id", EmitDefaultValue = true)]
        public string ParentId { get; set; }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [DataMember(Name = "slug", EmitDefaultValue = true)]
        public string Slug { get; set; }

        /// <summary>
        /// Gets or Sets Visibility
        /// </summary>
        [DataMember(Name = "visibility", EmitDefaultValue = false)]
        public int Visibility { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = true)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Primary
        /// </summary>
        [DataMember(Name = "primary", EmitDefaultValue = false)]
        public int Primary { get; set; }

        /// <summary>
        /// Gets or Sets UserCount
        /// </summary>
        [DataMember(Name = "user_count", EmitDefaultValue = false)]
        public int UserCount { get; set; }

        /// <summary>
        /// Gets or Sets AchievementCount
        /// </summary>
        [DataMember(Name = "achievement_count", EmitDefaultValue = false)]
        public int AchievementCount { get; set; }

        /// <summary>
        /// Gets or Sets BadgeCount
        /// </summary>
        [DataMember(Name = "badge_count", EmitDefaultValue = true)]
        public int? BadgeCount { get; set; }

        /// <summary>
        /// Gets or Sets DownloadCount
        /// </summary>
        [DataMember(Name = "download_count", EmitDefaultValue = false)]
        public int DownloadCount { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name = "updated", EmitDefaultValue = true)]
        public DateTime? Updated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Application {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  IconUrl: ").Append(IconUrl).Append("\n");
            sb.Append("  BannerUrl: ").Append(BannerUrl).Append("\n");
            sb.Append("  CapsuleImageUrl: ").Append(CapsuleImageUrl).Append("\n");
            sb.Append("  LibraryImageUrl: ").Append(LibraryImageUrl).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Primary: ").Append(Primary).Append("\n");
            sb.Append("  UserCount: ").Append(UserCount).Append("\n");
            sb.Append("  AchievementCount: ").Append(AchievementCount).Append("\n");
            sb.Append("  BadgeCount: ").Append(BadgeCount).Append("\n");
            sb.Append("  DownloadCount: ").Append(DownloadCount).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 75)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 75.", new [] { "Name" });
            }

            // IconUrl (string) maxLength
            if (this.IconUrl != null && this.IconUrl.Length > 255)
            {
                yield return new ValidationResult("Invalid value for IconUrl, length must be less than 255.", new [] { "IconUrl" });
            }

            // BannerUrl (string) maxLength
            if (this.BannerUrl != null && this.BannerUrl.Length > 255)
            {
                yield return new ValidationResult("Invalid value for BannerUrl, length must be less than 255.", new [] { "BannerUrl" });
            }

            // CapsuleImageUrl (string) maxLength
            if (this.CapsuleImageUrl != null && this.CapsuleImageUrl.Length > 255)
            {
                yield return new ValidationResult("Invalid value for CapsuleImageUrl, length must be less than 255.", new [] { "CapsuleImageUrl" });
            }

            // LibraryImageUrl (string) maxLength
            if (this.LibraryImageUrl != null && this.LibraryImageUrl.Length > 255)
            {
                yield return new ValidationResult("Invalid value for LibraryImageUrl, length must be less than 255.", new [] { "LibraryImageUrl" });
            }

            yield break;
        }
    }

}
