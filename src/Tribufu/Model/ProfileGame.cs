/*
 * Tribufu API
 *
 * REST API to access Tribufu services.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: contact@tribufu.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Tribufu.Client.OpenAPIDateConverter;

namespace Tribufu.Model
{
    /// <summary>
    /// ProfileGame
    /// </summary>
    [DataContract(Name = "ProfileGame")]
    public partial class ProfileGame : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileGame" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="capsuleImageUrl">capsuleImageUrl.</param>
        /// <param name="libraryImageUrl">libraryImageUrl.</param>
        /// <param name="slug">slug.</param>
        /// <param name="timeUsed">timeUsed.</param>
        /// <param name="unlockedAchievements">unlockedAchievements.</param>
        /// <param name="totalAchievements">totalAchievements.</param>
        /// <param name="stats">stats.</param>
        /// <param name="acquired">acquired.</param>
        /// <param name="lastUsed">lastUsed.</param>
        public ProfileGame(string id = default(string), string name = default(string), string capsuleImageUrl = default(string), string libraryImageUrl = default(string), string slug = default(string), double timeUsed = default(double), int unlockedAchievements = default(int), int totalAchievements = default(int), Object stats = default(Object), DateTime acquired = default(DateTime), DateTime? lastUsed = default(DateTime?))
        {
            this.Id = id;
            this.Name = name;
            this.CapsuleImageUrl = capsuleImageUrl;
            this.LibraryImageUrl = libraryImageUrl;
            this.Slug = slug;
            this.TimeUsed = timeUsed;
            this.UnlockedAchievements = unlockedAchievements;
            this.TotalAchievements = totalAchievements;
            this.Stats = stats;
            this.Acquired = acquired;
            this.LastUsed = lastUsed;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CapsuleImageUrl
        /// </summary>
        [DataMember(Name = "capsule_image_url", EmitDefaultValue = true)]
        public string CapsuleImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets LibraryImageUrl
        /// </summary>
        [DataMember(Name = "library_image_url", EmitDefaultValue = true)]
        public string LibraryImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [DataMember(Name = "slug", EmitDefaultValue = true)]
        public string Slug { get; set; }

        /// <summary>
        /// Gets or Sets TimeUsed
        /// </summary>
        [DataMember(Name = "time_used", EmitDefaultValue = false)]
        public double TimeUsed { get; set; }

        /// <summary>
        /// Gets or Sets UnlockedAchievements
        /// </summary>
        [DataMember(Name = "unlocked_achievements", EmitDefaultValue = false)]
        public int UnlockedAchievements { get; set; }

        /// <summary>
        /// Gets or Sets TotalAchievements
        /// </summary>
        [DataMember(Name = "total_achievements", EmitDefaultValue = false)]
        public int TotalAchievements { get; set; }

        /// <summary>
        /// Gets or Sets Stats
        /// </summary>
        [DataMember(Name = "stats", EmitDefaultValue = true)]
        public Object Stats { get; set; }

        /// <summary>
        /// Gets or Sets Acquired
        /// </summary>
        [DataMember(Name = "acquired", EmitDefaultValue = false)]
        public DateTime Acquired { get; set; }

        /// <summary>
        /// Gets or Sets LastUsed
        /// </summary>
        [DataMember(Name = "last_used", EmitDefaultValue = true)]
        public DateTime? LastUsed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProfileGame {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CapsuleImageUrl: ").Append(CapsuleImageUrl).Append("\n");
            sb.Append("  LibraryImageUrl: ").Append(LibraryImageUrl).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  TimeUsed: ").Append(TimeUsed).Append("\n");
            sb.Append("  UnlockedAchievements: ").Append(UnlockedAchievements).Append("\n");
            sb.Append("  TotalAchievements: ").Append(TotalAchievements).Append("\n");
            sb.Append("  Stats: ").Append(Stats).Append("\n");
            sb.Append("  Acquired: ").Append(Acquired).Append("\n");
            sb.Append("  LastUsed: ").Append(LastUsed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
