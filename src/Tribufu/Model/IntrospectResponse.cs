/*
 * Tribufu API
 *
 * REST API to access Tribufu services.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: contact@tribufu.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Tribufu.Client.OpenAPIDateConverter;

namespace Tribufu.Model
{
    /// <summary>
    /// IntrospectResponse
    /// </summary>
    [DataContract(Name = "IntrospectResponse")]
    public partial class IntrospectResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IntrospectResponse" /> class.
        /// </summary>
        /// <param name="jti">jti.</param>
        /// <param name="active">active.</param>
        /// <param name="tokenType">tokenType.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="sub">sub.</param>
        /// <param name="username">username.</param>
        /// <param name="scope">scope.</param>
        /// <param name="iss">iss.</param>
        /// <param name="aud">aud.</param>
        /// <param name="iat">iat.</param>
        /// <param name="exp">exp.</param>
        /// <param name="nbf">nbf.</param>
        public IntrospectResponse(string jti = default(string), bool active = default(bool), string tokenType = default(string), string clientId = default(string), string sub = default(string), string username = default(string), string scope = default(string), string iss = default(string), string aud = default(string), long? iat = default(long?), long? exp = default(long?), long? nbf = default(long?))
        {
            this.Jti = jti;
            this.Active = active;
            this.TokenType = tokenType;
            this.ClientId = clientId;
            this.Sub = sub;
            this.Username = username;
            this.Scope = scope;
            this.Iss = iss;
            this.Aud = aud;
            this.Iat = iat;
            this.Exp = exp;
            this.Nbf = nbf;
        }

        /// <summary>
        /// Gets or Sets Jti
        /// </summary>
        [DataMember(Name = "jti", EmitDefaultValue = true)]
        public string Jti { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets TokenType
        /// </summary>
        [DataMember(Name = "token_type", EmitDefaultValue = true)]
        public string TokenType { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name = "client_id", EmitDefaultValue = true)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets Sub
        /// </summary>
        [DataMember(Name = "sub", EmitDefaultValue = true)]
        public string Sub { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = true)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name = "scope", EmitDefaultValue = true)]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or Sets Iss
        /// </summary>
        [DataMember(Name = "iss", EmitDefaultValue = true)]
        public string Iss { get; set; }

        /// <summary>
        /// Gets or Sets Aud
        /// </summary>
        [DataMember(Name = "aud", EmitDefaultValue = true)]
        public string Aud { get; set; }

        /// <summary>
        /// Gets or Sets Iat
        /// </summary>
        [DataMember(Name = "iat", EmitDefaultValue = true)]
        public long? Iat { get; set; }

        /// <summary>
        /// Gets or Sets Exp
        /// </summary>
        [DataMember(Name = "exp", EmitDefaultValue = true)]
        public long? Exp { get; set; }

        /// <summary>
        /// Gets or Sets Nbf
        /// </summary>
        [DataMember(Name = "nbf", EmitDefaultValue = true)]
        public long? Nbf { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IntrospectResponse {\n");
            sb.Append("  Jti: ").Append(Jti).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Sub: ").Append(Sub).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Iss: ").Append(Iss).Append("\n");
            sb.Append("  Aud: ").Append(Aud).Append("\n");
            sb.Append("  Iat: ").Append(Iat).Append("\n");
            sb.Append("  Exp: ").Append(Exp).Append("\n");
            sb.Append("  Nbf: ").Append(Nbf).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
